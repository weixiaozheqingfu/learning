package com.glitter.spring.boot.aop;

import com.glitter.spring.boot.exception.BusinessException;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

/**
 *
 *  该类与DemoAspect配合用于研究多个AOP的之间的执行顺序,前提是两个AOP文件都使用before组合,且拦截规则存在交集,而请求又是请求交集的情况.
 *
 *  一.核心要搞明白两个AOP文件调用链先调用哪个,这是最关键的,决定了后面的顺序.
 *  使用注解@Order可以控制调用链调用顺序,order越小越是最先执行，但更重要的是最先执行的最后结束,因为多个AOP文件的调用链其实是一个同心圆。
 *
 *  二.假定DemoAspect的order值小于DemoAspect1,每次都是先进入DemoAspect再进入DemoAspect1的情况,两个AOP的执行情况如下.
 *  1.无任何异常情况下的执行调用链顺序
 *  DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterReturning..............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterReturning..............................................................

    2.DemoAspect.before方法抛出异常的调用链顺序,没有后面其他aop切面什么事情了,哈哈
    DemoAspect.before......................................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterThrowing...............................................................

    3.DemoAspect1.before方法抛出异常的调用链顺序
    DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterThrowing...............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterThrowing...............................................................

    4.目标方法抛出异常的调用链顺序
    DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterThrowing...............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterThrowing...............................................................

    5.DemoAspect1.after方法抛出异常的调用链顺序
    DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterThrowing...............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterThrowing...............................................................

    6.DemoAspect1.afterReturning方法抛出异常的调用链顺序
    DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterReturning..............................................................
    DemoAspect1.afterThrowing...............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterThrowing...............................................................

    7.DemoAspect.after方法抛出异常的调用链顺序
    DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterReturning..............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterThrowing...............................................................

    8.DemoAspect.afterReturning方法抛出异常的调用链顺序
    DemoAspect.before......................................................................
    DemoAspect1.before......................................................................
    DemoAspect1.after.......................................................................
    DemoAspect1.afterReturning..............................................................
    DemoAspect.after.......................................................................
    DemoAspect.afterReturning..............................................................
    DemoAspect.afterThrowing...............................................................

 总结：看着列了这么多种情况,其实都是废话,AOP的调用链还是很符合规矩的,没有一点点反常,只要知道正常的情况下怎么调用,那么出异常正常推理即可.

 *
 */
@Aspect
@Component
@Order(2)
public class DemoAspect1 {


    @Pointcut("execution(public * com.glitter.spring.boot.web.controller..*(..)) and @annotation(org.springframework.web.bind.annotation.RequestMapping)")
    public void demoAspectPointcut1(){}

    @Before("demoAspectPointcut1()")
    public void before(JoinPoint joinPoint) throws Throwable {
        System.out.println("DemoAspect1.before......................................................................");
        if(1==2){
            throw new BusinessException("-1","before异常");
        }
    }

    @After("demoAspectPointcut1()")
    public void after(JoinPoint joinPoint){
        System.out.println("DemoAspect1.after.......................................................................");
        if(1==2){
            throw new BusinessException("-1","after异常");
        }
    }

    @AfterReturning( pointcut = "demoAspectPointcut1()", returning = "ret")
    public void afterReturning(JoinPoint joinPoint, Object ret) throws Throwable {
        System.out.println("DemoAspect1.afterReturning..............................................................");
        if(1==2){
            throw new BusinessException("-1","afterReturning异常");
        }
    }

    @AfterThrowing(pointcut = "demoAspectPointcut1()", throwing = "ex")
    public void afterThrowing(JoinPoint joinPoint, Exception ex) throws Exception {
        System.out.println("DemoAspect1.afterThrowing...............................................................");
        if(null != ex){
            throw ex;
        }
        if(1==1){
            throw new BusinessException("-1","afterThrowing异常");
        }
    }

    private Logger getLogger(JoinPoint joinPoint){
        Logger logger = LoggerFactory.getLogger(joinPoint.getTarget().getClass());
        return logger;
    }

}